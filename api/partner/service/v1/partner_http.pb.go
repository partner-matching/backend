// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.2
// source: partner/service/v1/partner.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPartnerServiceAddTeam = "/partner.v1.PartnerService/AddTeam"
const OperationPartnerServiceDeleteTeam = "/partner.v1.PartnerService/DeleteTeam"
const OperationPartnerServiceGetTeam = "/partner.v1.PartnerService/GetTeam"
const OperationPartnerServiceGetTeamList = "/partner.v1.PartnerService/GetTeamList"
const OperationPartnerServiceJoinTeam = "/partner.v1.PartnerService/JoinTeam"
const OperationPartnerServiceUpdateTeam = "/partner.v1.PartnerService/UpdateTeam"

type PartnerServiceHTTPServer interface {
	AddTeam(context.Context, *Team) (*emptypb.Empty, error)
	DeleteTeam(context.Context, *DeleteTeamReq) (*emptypb.Empty, error)
	GetTeam(context.Context, *GetTeamReq) (*GetTeamResponse, error)
	GetTeamList(context.Context, *GetTeamListReq) (*GetTeamListResponse, error)
	JoinTeam(context.Context, *JoinTeamReq) (*emptypb.Empty, error)
	UpdateTeam(context.Context, *UpdateTeamReq) (*emptypb.Empty, error)
}

func RegisterPartnerServiceHTTPServer(s *http.Server, srv PartnerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/team/add", _PartnerService_AddTeam0_HTTP_Handler(srv))
	r.POST("/api/team/delete", _PartnerService_DeleteTeam0_HTTP_Handler(srv))
	r.POST("/api/team/update", _PartnerService_UpdateTeam0_HTTP_Handler(srv))
	r.GET("/api/team/get", _PartnerService_GetTeam0_HTTP_Handler(srv))
	r.GET("/api/team/list", _PartnerService_GetTeamList0_HTTP_Handler(srv))
	r.POST("/api/team/join", _PartnerService_JoinTeam0_HTTP_Handler(srv))
}

func _PartnerService_AddTeam0_HTTP_Handler(srv PartnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Team
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartnerServiceAddTeam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddTeam(ctx, req.(*Team))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartnerService_DeleteTeam0_HTTP_Handler(srv PartnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTeamReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartnerServiceDeleteTeam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTeam(ctx, req.(*DeleteTeamReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartnerService_UpdateTeam0_HTTP_Handler(srv PartnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTeamReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartnerServiceUpdateTeam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTeam(ctx, req.(*UpdateTeamReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartnerService_GetTeam0_HTTP_Handler(srv PartnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTeamReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartnerServiceGetTeam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTeam(ctx, req.(*GetTeamReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTeamResponse)
		return ctx.Result(200, reply)
	}
}

func _PartnerService_GetTeamList0_HTTP_Handler(srv PartnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTeamListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartnerServiceGetTeamList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTeamList(ctx, req.(*GetTeamListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTeamListResponse)
		return ctx.Result(200, reply)
	}
}

func _PartnerService_JoinTeam0_HTTP_Handler(srv PartnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinTeamReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartnerServiceJoinTeam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinTeam(ctx, req.(*JoinTeamReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type PartnerServiceHTTPClient interface {
	AddTeam(ctx context.Context, req *Team, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTeam(ctx context.Context, req *DeleteTeamReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetTeam(ctx context.Context, req *GetTeamReq, opts ...http.CallOption) (rsp *GetTeamResponse, err error)
	GetTeamList(ctx context.Context, req *GetTeamListReq, opts ...http.CallOption) (rsp *GetTeamListResponse, err error)
	JoinTeam(ctx context.Context, req *JoinTeamReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTeam(ctx context.Context, req *UpdateTeamReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type PartnerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPartnerServiceHTTPClient(client *http.Client) PartnerServiceHTTPClient {
	return &PartnerServiceHTTPClientImpl{client}
}

func (c *PartnerServiceHTTPClientImpl) AddTeam(ctx context.Context, in *Team, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/team/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartnerServiceAddTeam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartnerServiceHTTPClientImpl) DeleteTeam(ctx context.Context, in *DeleteTeamReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/team/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartnerServiceDeleteTeam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartnerServiceHTTPClientImpl) GetTeam(ctx context.Context, in *GetTeamReq, opts ...http.CallOption) (*GetTeamResponse, error) {
	var out GetTeamResponse
	pattern := "/api/team/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartnerServiceGetTeam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartnerServiceHTTPClientImpl) GetTeamList(ctx context.Context, in *GetTeamListReq, opts ...http.CallOption) (*GetTeamListResponse, error) {
	var out GetTeamListResponse
	pattern := "/api/team/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartnerServiceGetTeamList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartnerServiceHTTPClientImpl) JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/team/join"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartnerServiceJoinTeam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartnerServiceHTTPClientImpl) UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/team/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartnerServiceUpdateTeam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
