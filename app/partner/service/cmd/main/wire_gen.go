// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/partner-matching/backend/app/partner/service/internal/biz"
	"github.com/partner-matching/backend/app/partner/service/internal/conf"
	"github.com/partner-matching/backend/app/partner/service/internal/data"
	"github.com/partner-matching/backend/app/partner/service/internal/server"
	"github.com/partner-matching/backend/app/partner/service/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, userConstant *conf.UserConstant, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	cmdable := data.NewRedis(confData)
	mutex := data.NewRedSync(confData)
	rediStore := data.NewSession(confData, userConstant)
	dataData, cleanup, err := data.NewData(db, cmdable, mutex, logger, userConstant, rediStore)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	recovery := data.NewRecovery(dataData)
	transaction := data.NewTransaction(dataData)
	userUseCase := biz.NewUserUseCase(userRepo, recovery, transaction, logger, userConstant)
	authRepo := data.NewAuthRepo(dataData, logger)
	authRepoUseCase := biz.NewAuthRepoUseCase(authRepo, recovery, transaction, logger)
	partnerRepo := data.NewPartnerRepo(dataData, logger)
	partnerRepoUseCase := biz.NewPartnerRepoUseCase(partnerRepo, recovery, transaction, logger)
	validateUseCase := biz.NewValidateUseCase()
	partnerService := service.NewUserService(userUseCase, authRepoUseCase, partnerRepoUseCase, validateUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, partnerService, logger)
	httpServer := server.NewHTTPServer(confServer, partnerService, logger)
	cronJob := server.NewCronJob(mutex, userUseCase)
	app := newApp(logger, grpcServer, httpServer, cronJob)
	return app, func() {
		cleanup()
	}, nil
}
